name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/**

permissions:
  contents: read
  security-events: write  

env:
  REGISTRY_URI: ${{ secrets.AZURE_REGISTRY }}
  REGISTRY_NAME: ${{ secrets.AZURE_REGISTRY_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_IMAGE: ${{ secrets.AZURE_REGISTRY }}/{{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }}
  SONAR_USER_HOME: ${{ github.workspace }}/.sonar
  GIT_DEPTH: 0
  SAST_EXCLUDED_PATHS: "infrastructure/**"
  SAST_INCLUDED_PATHS: "application/"

jobs:
  build_compile:
    runs-on: ubuntu-latest
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies and build
        working-directory: application
        run: |
          npm ci
          unset CI
          npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: application/build

  eslint:
    name: Run eslint scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ESLint
        working-directory: application
        run: |
          npm ci
          npm install @microsoft/eslint-formatter-sarif@3.1.0

      - name: Run ESLint
        working-directory: application
        env:
          SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
        run: npx eslint . --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  unit_tests:
    needs: build_compile
    runs-on: ubuntu-latest
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
      - name: Run tests
        working-directory: application
        continue-on-error: true
        run: |
          npm ci
          npm test -- --coverage --coverageReporters=lcov --coverageReporters=cobertura --reporters=default --reporters=jest-junit --ci --runInBand
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            application/junit.xml
            application/coverage/cobertura-coverage.xml
            application/coverage

  cypress_tests:
    needs: build_compile
    runs-on: ubuntu-latest
    container:
      image: cypress/included:14.5.1
    steps:
      - uses: actions/checkout@v4
      - name: Run Cypress tests
        working-directory: application
        continue-on-error: true
        run: |
          npm ci
          npm start &
          npx wait-on http://localhost:3000 
          npm run e2e

  build_image:
    needs: [build_compile, unit_tests, cypress_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_REGISTRY }}
          username: ${{ secrets.AZURE_USERNAME }}
          password: ${{ secrets.AZURE_PASSWORD }}

      - name: Build and push image to Azure Container Registry
        working-directory: application
        run: |
          docker buildx build \
            --tag ${{ secrets.AZURE_REGISTRY }}/${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }} \
            --push \
            .

      - name: Logout Docker
        run: docker logout ${{ secrets.AZURE_REGISTRY }}

  # sonarqube-check:
  #   if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sonarsource/sonar-scanner-cli:latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run SonarQube Scanner
  #       env:
  #         SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: |
  #         sonar-scanner \
  #           -Dsonar.projectKey=$SONAR_PROJECT_KEY \
  #           -Dsonar.sources=. \
  #           -Dsonar.host.url=$SONAR_HOST_URL \
  #           -Dsonar.login=$SONAR_TOKEN

  trivy_scan:
    needs: build_image
    uses: ./.github/workflows/container_scanning.yml
    with:
      azure_registry: ${{ vars.AZURE_REGISTRY }}
      azure_registry_name: ${{ vars.AZURE_REGISTRY_NAME }}
      image_tag: ${{ github.sha }}

  # deploy:
  #   needs: build_image
  #   runs-on: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/azure-cli:latest
  #   steps:
  #     - name: Azure login and deploy container app
  #       env:
  #         AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
  #         AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
  #         AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #         AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #         AZURE_CONTAINER_APP_NAME: ${{ secrets.AZURE_CONTAINER_APP_NAME }}
  #         AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  #         DOCKER_IMAGE: ${{ secrets.AZURE_REGISTRY }}/${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }}
  #       run: |
  #         az login --service-principal --username "$AZURE_USERNAME" --password "$AZURE_PASSWORD" --tenant "$AZURE_TENANT_ID"
  #         az account set --subscription "$AZURE_SUBSCRIPTION_ID"
  #         az containerapp update --name "$AZURE_CONTAINER_APP_NAME" --resource-group "$AZURE_RESOURCE_GROUP" --image "$DOCKER_IMAGE"
  #         az logout
