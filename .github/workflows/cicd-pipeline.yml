name: azure-webapp-deploy-pipeline
# description: CI/CD pipeline for deploying a Node.js React application to Azure app service

on:
  push:
    branches:
      - main
      - develop
      - feature/**

permissions:
  contents: read
  security-events: write  

env:
  REGISTRY_URI: ${{ vars.AZURE_REGISTRY }}
  REGISTRY_NAME: ${{ vars.AZURE_REGISTRY_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_IMAGE: ${{ vars.AZURE_REGISTRY }}/{{ vars.AZURE_REGISTRY_NAME }}:${{ github.sha }}
  SONAR_USER_HOME: ${{ github.workspace }}/.sonar
  GIT_DEPTH: 0
  SAST_EXCLUDED_PATHS: "infrastructure/**"
  SAST_INCLUDED_PATHS: "application/"

jobs:
  eslint:
    name: Run eslint scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: application/package-lock.json

      - name: Install dependencies
        working-directory: application
        run: |
          npm ci
          npm install @microsoft/eslint-formatter-sarif@3.1.0

      - name: Run ESLint
        working-directory: application
        env:
          SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
        run: npm run lint
        continue-on-error: true

      - name: Upload analysis results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: application/eslint-sarif-report.sarif
          checkout_path: application
          wait-for-processing: true

  build_compile:
    runs-on: ubuntu-latest
    needs: eslint
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: application/package-lock.json

      - name: Install dependencies and build
        working-directory: application
        run: |
          npm ci
          unset CI
          npm run build
          echo "Build completed successfully"

  unit_tests:
    needs: build_compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: application/package-lock.json

      - name: Install dependencies and run tests
        working-directory: application
        continue-on-error: true
        run: |
          npm ci
          npm test -- --coverage --coverageReporters=lcov --coverageReporters=cobertura --reporters=default --reporters=jest-junit --ci --runInBand

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            application/junit.xml
            application/coverage/
          retention-days: 1

  cypress_tests:
    needs: build_compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: application/package-lock.json

      - name: Install dependencies
        working-directory: application
        run: npm ci

      - name: Run Cypress tests
        working-directory: application
        continue-on-error: true
        run: |
          npm start &
          npx wait-on http://localhost:3000 
          npm run e2e

  # sonarqube-check:
  #   needs: [build_compile, unit_tests, cypress_tests]
  #   if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   container:
  #     image: sonarsource/sonar-scanner-cli:latest
  #     options: --user root
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
          
  #     - name: Download test coverage
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: test-reports
  #         path: application/
          
  #     - name: Verify coverage files and project structure
  #       run: |
  #         echo "=== Project Structure ==="
  #         ls -la
  #         echo "=== Application Directory ==="
  #         ls -la application/
  #         echo "=== Coverage Directory ==="
  #         ls -la application/coverage/ || echo "Coverage directory not found"
  #         echo "=== LCOV File Content (first 20 lines) ==="
  #         cat application/coverage/lcov.info | head -20 || echo "LCOV file missing or empty"
  #         echo "=== All coverage files ==="
  #         find . -name "*.info" -o -name "*.xml" | grep -E "(lcov|cobertura|coverage)" | head -10
  #         echo "=== Sonar Properties File ==="
  #         cat sonar-project.properties || echo "sonar-project.properties not found"
  #     - name: Run SonarQube Scanner
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: |
  #         # Use sonar-project.properties file with environment variable override
  #         sonar-scanner \
  #           -Dsonar.login=$SONAR_TOKEN

  build_image:
    needs: [build_compile, unit_tests, cypress_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image to Docker Hub
        working-directory: application
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY_NAME }}:${{ github.sha }} \
            --tag ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY_NAME }}:latest \
            --push \
            .

      - name: Logout from Docker Hub
        run: docker logout

  trivy_scan:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-security'

      - name: Run Trivy scanner with build failure on CRITICAL/HIGH
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY_NAME }}:${{ github.sha }}'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
        continue-on-error: true

      - name: Upload scan report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-results.sarif
          retention-days: 30

      - name: Logout Docker
        if: always()
        run: docker logout 

  deploy:
    runs-on: ubuntu-latest
    needs: [ build_image, trivy_scan ]
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'deploy' }}
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:

      - name: Set deployment slot based on branch
        id: set-vars
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
            echo "app_name=${{ vars.AZURE_WEBAPP_NAME }}" >> $GITHUB_OUTPUT
            echo "publish_profile=${{ secrets.PROD_PUBLISH_PROFILE }}" >> $GITHUB_OUTPUT
            echo "slot=production" >> $GITHUB_OUTPUT
          else
            echo "env_name=develop" >> $GITHUB_OUTPUT
            echo "app_name=${{ vars.AZURE_WEBAPP_NAME_DEVELOP }}" >> $GITHUB_OUTPUT
            echo "publish_profile=${{ secrets.DEVELOP_PUBLISH_PROFILE }}" >> $GITHUB_OUTPUT
            echo "slot=develop" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.set-vars.outputs.app_name }}
          slot-name: ${{ steps.set-vars.outputs.slot }}
          publish-profile: ${{ steps.set-vars.outputs.publish_profile }}
          images: '${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY_NAME }}:${{ github.sha }}'
