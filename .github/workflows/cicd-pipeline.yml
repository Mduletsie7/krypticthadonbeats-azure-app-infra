name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/**

env:
  REGISTRY_URI: ${{ secrets.AZURE_REGISTRY }}
  REGISTRY_NAME: ${{ secrets.AZURE_REGISTRY_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_IMAGE: ${{ secrets.AZURE_REGISTRY }}/{{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }}
  SONAR_USER_HOME: ${{ github.workspace }}/.sonar
  GIT_DEPTH: 0
  SAST_EXCLUDED_PATHS: "infrastructure/**"
  SAST_INCLUDED_PATHS: "application/"

jobs:
  build_compile:
    runs-on: ubuntu-latest
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies and build
        working-directory: application
        run: |
          npm i
          unset CI
          npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: application/dist

  unit-tests:
    needs: build_compile
    runs-on: ubuntu-latest
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Run tests
        working-directory: application
        continue-on-error: true
        run: |
          cd application
          npm ci
          npm test -- --coverage --coverageReporters=lcov --coverageReporters=cobertura --reporters=default --reporters=jest-junit --ci --runInBand
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            application/junit.xml
            application/coverage/cobertura-coverage.xml
            application/coverage/

  cypress_tests:
    runs-on: ubuntu-latest
    container:
      image: node:latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies and run Cypress tests
        run: |
          cd application
          npm ci
          npm start &
          npx wait-on http://localhost:3000
          npm run e2e

  build_image:
    needs: build_compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AZURE_REGISTRY }}
          username: ${{ secrets.AZURE_USERNAME }}
          password: ${{ secrets.AZURE_PASSWORD }}

      - name: Build and push Docker image
        working-directory: application
        run: |
          docker build -t ${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }} .
          docker tag ${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }} ${{ secrets.AZURE_REGISTRY }}/${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }}
          docker push ${{ secrets.AZURE_REGISTRY }}/${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }}

      - name: Logout Docker
        run: docker logout ${{ secrets.AZURE_REGISTRY }}

  sonarqube-check:
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    container:
      image: sonarsource/sonar-scanner-cli:latest
    steps:
      - uses: actions/checkout@v4
      - name: Run SonarQube Scanner
        env:
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

  container_scanning:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install curl (if needed)
        run: |
          if ! command -v curl &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y curl
          fi

      - name: Install Docker Scout
        run: |
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          sh install-scout.sh

      - name: Login Docker Scout and ACR
        env:
          DOCKER_SCOUT_TOKEN: ${{ secrets.DOCKER_SCOUT_TOKEN }}
          DOCKER_SCOUT_HUB_USERNAME: ${{ secrets.DOCKER_SCOUT_HUB_USERNAME }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
          REGISTRY_URI: ${{ secrets.AZURE_REGISTRY }}
        run: |
          echo "$DOCKER_SCOUT_TOKEN" | docker login -u "$DOCKER_SCOUT_HUB_USERNAME" --password-stdin
          echo "$AZURE_PASSWORD" | docker login $REGISTRY_URI -u "$AZURE_USERNAME" --password-stdin

      - name: Run CVE scan and Quickview
        run: |
          docker scout cves ${{ secrets.AZURE_REGISTRY }}/${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }} > cves-report.txt
          docker scout quickview ${{ secrets.AZURE_REGISTRY }}/${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }}

      - name: Upload CVE report
        uses: actions/upload-artifact@v4
        with:
          name: cves-report
          path: cves-report.txt

      - name: Logout Docker
        run: docker logout ${{ secrets.AZURE_REGISTRY }}

  deploy:
    needs: build_image
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/azure-cli:latest
    steps:
      - name: Azure login and deploy container app
        env:
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_CONTAINER_APP_NAME: ${{ secrets.AZURE_CONTAINER_APP_NAME }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          DOCKER_IMAGE: ${{ secrets.AZURE_REGISTRY }}/${{ secrets.AZURE_REGISTRY_NAME }}:${{ github.sha }}
        run: |
          az login --service-principal --username "$AZURE_USERNAME" --password "$AZURE_PASSWORD" --tenant "$AZURE_TENANT_ID"
          az account set --subscription "$AZURE_SUBSCRIPTION_ID"
          az containerapp update --name "$AZURE_CONTAINER_APP_NAME" --resource-group "$AZURE_RESOURCE_GROUP" --image "$DOCKER_IMAGE"
          az logout
