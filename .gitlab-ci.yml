stages:
  - build_compile
  - test
  - code_scanning
  - build_image
  - container_scanning
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  REGISTRY_URI: $AZURE_REGISTRY
  REGISTRY_NAME: $AZURE_REGISTRY_NAME
  IMAGE_TAG: $CI_COMMIT_SHA
  DOCKER_IMAGE: $REGISTRY_URI/$REGISTRY_NAME:$IMAGE_TAG

# Anchors
.azure-login: &azure_login
  - echo "$AZURE_PASSWORD" | docker login $AZURE_REGISTRY -u "$AZURE_USERNAME" --password-stdin


# build_compile:
#   stage: build_compile
#   image: node:20-alpine
#   script:
#     - cd application/frontend
#     - npm ci 
#     - unset CI
#     - npm run build
#   artifacts:
#     paths:
#       - "application/frontend/dist"

# test:
#   stage: test
#   image: node:20-alpine
#   dependencies:
#     - build_compile 
#   script:
#     - cd application/frontend
#     - npm ci
#     - npm run test -- --watchAll=false

build_image:
  stage: build_image
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  before_script:
    - *azure_login
  script:
    - echo "Building Docker image..."
    - cd application/frontend
    - docker build -t $AZURE_REGISTRY_NAME:$IMAGE_TAG .
    - docker tag $AZURE_REGISTRY_NAME:$IMAGE_TAG $DOCKER_IMAGE
    - echo "Pushing to ACR with tag $IMAGE_TAG "
    - docker push $DOCKER_IMAGE
  after_script:
    - docker logout $REGISTRY_URI

container_scanning:
  stage: container_scanning
  image: docker:latest
  services:
    - docker:dind
  needs: ["build_image"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  before_script:
    - *azure_login
  script:
    # Install Docker Scout
    - curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
    - sh install-scout.sh
    # Authenticate Docker Scout
    - echo "$DOCKER_SCOUT_TOKEN" | docker login -u "$DOCKER_SCOUT_HUB_USERNAME" --password-stdin
    # Run CVES scan
    - docker scout cves $DOCKER_IMAGE > cves-report.txt
    - docker scout quickview $DOCKER_IMAGE
  artifacts:
    paths:
      - cves-report.txt
    when: always
  after_script:
    - docker logout $REGISTRY_URI

deploy:
  stage: deploy
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  script:
    - echo "Getting ready for lift off... 3... 2... 1... Deployed!"