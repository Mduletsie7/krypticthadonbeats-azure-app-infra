stages:
  - build_compile
  - test
  - code_scanning
  - sonar_scan
  - build_image
  - container_scanning
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  REGISTRY_URI: $AZURE_REGISTRY
  REGISTRY_NAME: $AZURE_REGISTRY_NAME
  IMAGE_TAG: $CI_COMMIT_SHA
  DOCKER_IMAGE: $REGISTRY_URI/$REGISTRY_NAME:$IMAGE_TAG
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
  GIT_DEPTH: "0"  # Ensure full history for analysis
  SAST_EXCLUDED_PATHS: "infrastructure/**"
  SAST_INCLUDED_PATHS: "application/"

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .sonar/cache

# Anchors
.azure-acr-login: &azure_acr_login
  - echo "$AZURE_PASSWORD" | docker login $AZURE_REGISTRY -u "$AZURE_USERNAME" --password-stdin

build_compile:
  stage: build_compile
  image: node:20-alpine
  script:
    - cd application/
    - npm ci 
    - unset CI
    - npm run build
  artifacts:
    paths:
      - "application/dist"

unit-tests:
  stage: test
  image: node:20-alpine
  dependencies:
    - build_compile 
  script:
    - cd application
    - npm ci
    - npm test -- --coverage --coverageReporters=lcov --coverageReporters=cobertura --reporters=default --reporters=jest-junit --ci --runInBand || true
  artifacts:
    reports:
      junit: application/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: application/coverage/cobertura-coverage.xml
    paths:
      - application/coverage/
      - application/junit.xml
    expire_in: 30 days
    when: always
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  allow_failure: true

build_image:
  stage: build_image
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *azure_acr_login
  script:
    - echo "Building Docker image..."
    - cd application/
    - docker build -t $AZURE_REGISTRY_NAME:$IMAGE_TAG .
    - docker tag $AZURE_REGISTRY_NAME:$IMAGE_TAG $DOCKER_IMAGE
    - echo "Pushing to ACR with tag $IMAGE_TAG "
    - docker push $DOCKER_IMAGE
  after_script:
    - docker logout $REGISTRY_URI

sonarqube-check:
  image: sonarsource/sonar-scanner-cli:latest
  stage: sonar_scan
  cache: {}
  script:
    - sonar-scanner 
        -Dsonar.projectKey=$SONAR_PROJECT_KEY
        -Dsonar.sources=. 
        -Dsonar.host.url=$SONAR_HOST_URL 
        -Dsonar.login=$SONAR_TOKEN
  only:
    - develop
    - feature
    - main

container_scanning:
  stage: container_scanning
  image: docker:latest
  services:
    - docker:dind
  needs: ["build_image"]
  before_script:
    - apk add --no-cache curl
    - *azure_acr_login
  script:
    # Install Docker Scout
    - curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
    - sh install-scout.sh
    # Authenticate Docker Scout
    - echo "$DOCKER_SCOUT_TOKEN" | docker login -u "$DOCKER_SCOUT_HUB_USERNAME" --password-stdin
    # Run CVES scan
    - docker scout cves $DOCKER_IMAGE > cves-report.txt
    - docker scout quickview $DOCKER_IMAGE
  artifacts:
    paths:
      - cves-report.txt
    when: always
  after_script:
    - docker logout $REGISTRY_URI

deploy:
  stage: deploy
  image: mcr.microsoft.com/azure-cli:latest
  script:
    # Azure sp login
    - echo "Using service principal to log in to Azure"
    - az login --service-principal --username "$AZURE_USERNAME" --password "$AZURE_PASSWORD" --tenant "$AZURE_TENANT_ID"
    - az account set --subscription "$AZURE_SUBSCRIPTION_ID"
    # Container app update
    - echo "Updating container app with latest version... 3... 2... 1..."
    - az containerapp update --name "$AZURE_CONTAINER_APP_NAME" --resource-group "$AZURE_RESOURCE_GROUP" --image "$DOCKER_IMAGE"
  after_script:
    - az logout