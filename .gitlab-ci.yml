stages:
  - build
  - test
  - scan
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  REGISTRY_URI: 865494649634.dkr.ecr.us-east-1.amazonaws.com
  REPO_NAME: krypticthadonbeats-dev
  IMAGE_TAG: $CI_COMMIT_SHA
  DOCKER_IMAGE: $REGISTRY_URI/$REPO_NAME:$IMAGE_TAG

# Anchors
.aws-config: &aws_config
before_script:
  - apk add --no-cache aws-cli
  - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
  - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
  - aws configure set region "$AWS_REGION"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - *aws_config
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY_URI
    - echo "Building Docker image..."
    - cd application/frontend
    - docker build -t $REPO_NAME:$IMAGE_TAG .
    - docker tag $REPO_NAME:$IMAGE_TAG $DOCKER_IMAGE
    - echo "Pushing to ECR..."
    - docker push $DOCKER_IMAGE
  after_script:
    - docker logout $REGISTRY_URI


container_scanning:
  stage: scan
  image: docker:latest
  services:
    - docker:dind
  needs: ["build"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - *aws_config
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY_URI
    # Install Docker Scout
    - curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
    - sh install-scout.sh
    # Authenticate Docker Scout
    - echo "$DOCKER_SCOUT_TOKEN" | docker login -u "$DOCKER_SCOUT_HUB_USERNAME" --password-stdin
    # Run CVES scan
    - docker scout cves $DOCKER_IMAGE > cves-report.txt
    # Quickview with potential failure on critical issues
    - docker scout quickview $DOCKER_IMAGE
  artifacts:
    paths:
      - cves-report.txt
    when: always
  after_script:
    - docker logout $REGISTRY_URI

deploy:
  stage: deploy
  image: alpine:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  script:
    - echo "Getting ready for lift off... 3... 2... 1... Deployed!"